#pragma once

#include "Input/Private/DigitalElement.h"

namespace DAVA
{
class Window;
class InputSystem;

namespace Private
{
class KeyboardDeviceImpl;
struct MainDispatcherEvent;
}

/**
    \ingroup input
    Represents keyboard input device.
    It manages all keyboard elements (eInputElements::KB_*), both virtual and scancodes.

    Scancode elements are identified by their position on a keyboard and do not depend of input language and layout.
    Virtual elements are identified by a symbol they will produce when pressed, and depend on input layout.
    For example, `Q` button on QWERTY layout corresponds to KB_Q scancode element and KB_Q_VIRTUAL element,
    but pressing the same button on AZERTY layout corresponds to KB_Q scancode element and KB_A_VIRTUAL element.

    `ConvertVirtualToScancode` and `ConvertScancodeToVirtual` can be used to map a scancode element to a virtual or vice versa.

    Virtual elements are supported only on Win32 platform for now, other platforms always map KB_* to corresponding KB_*_VIRTUAL (i.e. KB_Q always maps to KB_Q_VIRTUAL despite of a layout).   

    Input events, generated by this device, always report scancode element as their elementId.
*/
class KeyboardInputDevice final : public InputDevice
{
    friend class DeviceManager; // For creation

public:
    // InputDevice overrides
    bool SupportsElement(eInputElements elementId) const override;
    eDigitalElementStates GetDigitalElementState(eInputElements elementId) const override;
    AnalogElementState GetAnalogElementState(eInputElements elementId) const override;
    String GetElementStringRepresentation(eInputElements elementId) const override;

    /**
        Convert a scancode key to a virtual key according to the current keyboard layout.

        \note Only Win32 platform supports virtual keys for now.
    */
    eInputElements ConvertScancodeToVirtual(eInputElements scancodeElement) const;

    /**
        Convert a virtual key to a scancode key according to the current keyboard layout.

        \note Only Win32 platform supports virtual keys for now.
    */
    eInputElements ConvertVirtualToScancode(eInputElements virtualElement) const;

private:
    KeyboardInputDevice(uint32 id);
    ~KeyboardInputDevice();
    KeyboardInputDevice(const KeyboardInputDevice&) = delete;
    KeyboardInputDevice& operator=(const KeyboardInputDevice&) = delete;

    void CreateAndSendInputEvent(eInputElements elementId, const Private::DigitalElement& element, Window* window, DAVA::int64 timestamp) const;

    bool HandleEvent(const Private::MainDispatcherEvent& e);
    void OnEndFrame();
    void OnWindowFocusChanged(DAVA::Window* window, bool focused);

private:
    InputSystem* inputSystem = nullptr;
    Private::KeyboardDeviceImpl* impl = nullptr;

    // State of each scancode key
    Array<Private::DigitalElement, static_cast<uint32>(INPUT_ELEMENTS_KB_COUNT_SCANCODE)> keys;

    size_t endFrameConnectionToken;
    size_t primaryWindowFocusChangedToken;
};
} // namespace DAVA